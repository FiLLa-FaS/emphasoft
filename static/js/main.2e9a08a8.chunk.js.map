{"version":3,"sources":["base/theme.js","components/FormAuth/fields.js","components/FormAuth/validation.js","components/FormAuth/index.js","components/ListUsers/index.js","components/Input/index.js","ViewAuth.js","ViewUsers.js","App.js","serviceWorker.js","index.js"],"names":["GlobalTheme","breakpoints","xs","sm","md","lg","xl","FormFields","username","password","validation","yup","shape","typeError","required","min","Wrapper","styled","div","FormAuth","submitAuth","initialValues","fields","validationSchema","validateOnBlur","onSubmit","values","fetch","method","headers","body","JSON","stringify","then","response","status","error","Error","statusText","json","results","Cookies","set","token","authorizeUser","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","className","htmlFor","type","name","onChange","onBlur","value","disabled","onClick","ul","breakpoint","ListUsers","users","title","map","user","key","id","first_name","last_name","input","Input","props","ViewAuth","useState","isSubmitting","setIsSubmitting","to","get","fetchUsers","a","Authorization","ErrorMessage","p","ViewUsers","setUsers","searchTerm","setSearchTerm","useEffect","getUsers","placeholder","event","persist","debounce","target","dbChange","actualUsers","sortBy","filter","toLowerCase","includes","length","renderUsers","App","basename","process","theme","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2e9a08a8.chunk.js","sourcesContent":["export const GlobalTheme = {\r\n    breakpoints: {\r\n        xs: 0,\r\n        sm: 576,\r\n        md: 768,\r\n        lg: 992,\r\n        xl: 1200\r\n    }}","const FormFields = {\r\n    username: '',\r\n    password: ''\r\n}\r\nexport default FormFields","import * as yup from 'yup'\r\n\r\nconst validation = yup.object().shape({\r\n    username: yup.string().typeError('Должно быть строкой').required('Обязательно'),\r\n    password: yup.string().typeError('Должно быть строкой').required('Обязательно').min(4, 'У пароля должно быть минимум 4 символа')\r\n})\r\n\r\nexport default validation","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {Formik} from 'formik'\r\nimport Cookies from 'js-cookie'\r\nimport fields from './fields'\r\nimport validation from './validation'\r\n\r\nconst FormAuth = ({submitAuth}) => {\r\n    \r\n    const authorizeUser = (values) => {\r\n\r\n        fetch('https://emphasoft-test-assignment.herokuapp.com/api-token-auth/', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n              },\r\n            body: JSON.stringify({username: values.username, password: values.password})\r\n        })\r\n        .then((response) => {\r\n            if (response.status >= 200 && response.status < 300) {\r\n                return response;\r\n            } else {\r\n                let error = new Error(response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(results => {\r\n            Cookies.set('token', results.token);\r\n        submitAuth();\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Formik\r\n                initialValues={fields}\r\n                validationSchema={validation}\r\n                validateOnBlur\r\n                onSubmit={(values) => {authorizeUser(values)}}\r\n                >{({values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty}) => (\r\n                    <div className=\"form\">\r\n                        <p>\r\n                            <label htmlFor=\"username\">Логин</label>\r\n                            <input className=\"input\" type=\"text\" name=\"username\" onChange={handleChange} onBlur={handleBlur} value={values.username}/>\r\n                        </p>\r\n                        {touched.username && errors.username && <p className=\"error\">{errors.username}</p>}\r\n                        <p>\r\n                            <label htmlFor=\"password\">Пароль</label>\r\n                            <input className=\"input\" type=\"password\" name=\"password\" onChange={handleChange} onBlur={handleBlur} value={values.password}/>\r\n                        </p>\r\n                        {touched.password && errors.password && <p className=\"error\">{errors.password}</p>}\r\n                        <button disabled={!isValid && !dirty} onClick={handleSubmit} type=\"submit\">Отправить</button>\r\n                    </div>\r\n            )}</Formik>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n.form {\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    max-width: 400px;\r\n    padding: 24px;\r\n    margin: 10px auto 0;\r\n    border: solid 1px #eee;\r\n    border-radius: 24px;\r\n}\r\n\r\n.input {\r\n    display: block;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    line-height: 1.5em;\r\n    border-radius: 4px;\r\n    border: solid 1px #eee;\r\n    padding: 4px 6px;\r\n}\r\n\r\n.error {\r\n    color: red;\r\n    font-weight: 700;\r\n    font-size: 12px;\r\n}\r\n`\r\n\r\nexport default FormAuth","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport breakpoint from 'styled-components-breakpoint'\r\n\r\nconst ListUsers = ({users, title}) => {\r\n    return <Wrapper>\r\n    <h2 className=\"title\">{title}</h2>\r\n        {users.map(user => (\r\n                    <li key={user.id} className=\"user-item\">\r\n                        <h2 className=\"user-item__title\">{user.first_name} {user.last_name}</h2>\r\n                        <p className=\"user-item__id\">ID - {user.id}</p>\r\n                        <p className=\"user-item__username\">Логин - {user.username}</p>\r\n                    </li>\r\n                ))}\r\n    </Wrapper>\r\n}\r\n\r\nconst Wrapper = styled.ul`\r\nfont-family: Arial, Helvetica, sans-serif;\r\nlist-style: none;\r\npadding: 0;\r\n\r\n.title {\r\n    text-align: center;\r\n  font-weight: 900;\r\n  font-size: 36px;\r\n\r\n  ${breakpoint('xs', 'md')`\r\n           font-size: 28px;  \r\n           text-align: left; \r\n          `}\r\n}\r\n\r\n.user-item {\r\nmargin-top: 60px;\r\n\r\n&:first-of-type {\r\n    margin-top: 0;\r\n}\r\n\r\n    &__title {\r\n        margin: 0;\r\n        padding: 0;\r\n        font-size: 32px;\r\n        font-weight: 700;\r\n        overflow-wrap: break-word;\r\n\r\n        ${breakpoint('xs', 'md')`\r\n                  font-size: 24px;  \r\n                `}\r\n    }\r\n\r\n    &__id {\r\n        padding: 0;\r\n        margin: 15px 0 0 0;\r\n        font-size: 24px;\r\n\r\n        ${breakpoint('xs', 'md')`\r\n                  font-size: 18px;\r\n                  margin: 7px 0 0 0;  \r\n                `}\r\n    }\r\n\r\n    &__username {\r\n        padding: 0;\r\n        margin: 15px 0 0 0;\r\n        font-size: 28px;\r\n        font-style: italic;\r\n\r\n        ${breakpoint('xs', 'md')`\r\n                  font-size: 18px;\r\n                  margin: 7px 0 0 0;  \r\n                `}\r\n    }\r\n}\r\n`\r\n\r\nexport default ListUsers","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport breakpoint from 'styled-components-breakpoint'\r\n\r\nconst Input = (props) => {\r\n  return <Wrapper {...props} />;\r\n};\r\n\r\nconst Wrapper = styled.input`\r\n  margin-bottom: 20px;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  font-size: 20px;\r\n  ${breakpoint('xs', 'md')`\r\n            margin-bottom: 10px;  \r\n          `}\r\n`;\r\n\r\nexport default Input;\r\n","import React, {useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport breakpoint from 'styled-components-breakpoint'\r\nimport {FormAuth} from './components'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst ViewAuth = () => {\r\n\r\n\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n    const showAuth = () => {\r\n        if(isSubmitting) {\r\n            return <p className=\"success-auth\">\r\n            Вы успешно авторизованы!\r\n        </p>\r\n        } else {\r\n            return <FormAuth submitAuth={submitAuth}/>\r\n        }\r\n    }\r\n\r\n    const submitAuth = () => {\r\n        setIsSubmitting(true)\r\n    }\r\n\r\n    return  <Wrapper>\r\n                {showAuth()}\r\n                {isSubmitting && \r\n                    <p className=\"auth-link\">\r\n                        <NavLink to={\"/users\"}>Перейти на страницу пользователей</NavLink>\r\n                    </p> }\r\n            </Wrapper>\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    padding: 30px;\r\n    \r\n    ${breakpoint('xs', 'md')`\r\n                padding: 10px 0;\r\n            `}\r\n\r\n    .success-auth {\r\n        text-align: center;\r\n        font-size: 36px;\r\n    }\r\n\r\n    .auth-link {\r\n        margin: 0;\r\n        padding: 0;\r\n        font-size: 18px;\r\n        text-align: center;\r\n        a {\r\n\r\n            color:#c93030;\r\n            transition: color 0.2s;\r\n\r\n            &:hover {\r\n                color: red;\r\n            }\r\n        }\r\n        \r\n}\r\n`\r\n\r\nexport default ViewAuth","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport breakpoint from \"styled-components-breakpoint\";\r\nimport { sortBy, debounce } from \"lodash\";\r\nimport { ListUsers, Input } from \"./components\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nconst token = Cookies.get(\"token\");\r\n\r\nasync function fetchUsers() {\r\n  const response = await fetch(\r\n    \"https://emphasoft-test-assignment.herokuapp.com/api/v1/users/\",\r\n    { headers: { Authorization: `Token ${token}` } }\r\n  );\r\n\r\n  return await response.json();\r\n}\r\n\r\nconst ViewUsers = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function getUsers() {\r\n      const response = await fetchUsers();\r\n      setUsers(response);\r\n    }\r\n    getUsers();\r\n  }, []);\r\n\r\n  const handleChange = (event) => {\r\n    event.persist();\r\n\r\n    const dbChange = debounce(() => {\r\n      setSearchTerm(event.target.value);\r\n    }, 500);\r\n\r\n    dbChange();\r\n  };\r\n\r\n  const renderUsers = () => {\r\n    const actualUsers = sortBy(\r\n      (users.filter((user) => user.username.toLowerCase().includes(searchTerm))),\r\n      \"id\"\r\n    );\r\n\r\n    if (actualUsers.length > 0) {\r\n      return <ListUsers title=\"Все пользователи\" users={actualUsers} />;\r\n    }\r\n\r\n    return <ErrorMessage>Результатов не найдено</ErrorMessage>;\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Input placeholder=\"Введите текст\" onChange={handleChange} />\r\n      {renderUsers()}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 30px;\r\n  ${breakpoint(\"xs\", \"md\")`\r\n          padding: 10px 0;  \r\n        `}\r\n`;\r\nconst ErrorMessage = styled.p`\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  font-size: 18px;\r\n  color: #c93030;\r\n  margin: 0;\r\n\r\n  ${breakpoint(\"xs\", \"md\")`\r\n    font-size: 16px;\r\n  `}\r\n`;\r\n\r\nexport default ViewUsers;","import React from 'react'\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { ThemeProvider } from 'styled-components'\nimport { GlobalTheme } from \"./base/theme\";\nimport ViewAuth from './ViewAuth'\nimport ViewUsers from './ViewUsers'\n\nconst App = () => {\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <ThemeProvider theme={GlobalTheme}>\n            <Switch>\n            <Route path=\"/\" exact component={ViewAuth} />\n            <Route path=\"/users\" component={ViewUsers} />\n          </Switch>\n        </ThemeProvider>\n        </BrowserRouter>\n    )\n     \n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}